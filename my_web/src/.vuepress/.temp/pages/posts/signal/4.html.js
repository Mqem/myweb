export const data = JSON.parse("{\"key\":\"v-4fd8ecd2\",\"path\":\"/posts/signal/4.html\",\"title\":\"SPA部分解释\",\"lang\":\"zh-CN\",\"frontmatter\":{\"icon\":\"pen-to-square\",\"date\":\"2023-07-27T00:00:00.000Z\",\"category\":[\"算法\"],\"tag\":[\"SPA\",\"编码\",\"代码\",\"LDPC\"],\"star\":true,\"sticky\":true,\"description\":\"SPA部分解释 （本文程序默认群文件py_sum_product_example） 一.概括内容 SPA是一种用于解码线性块代码的迭代算法，通常用于低密度奇偶校验（LDPC）码。该算法通过迭代地更新\\\"概率\\\"消息，尝试找到一个合法的码字，即满足校验矩阵H的所有行的线性方程的解。 以下是代码的大体内容和结构： 导入numpy库：该库主要用于数值计算。 定义奇偶校验矩阵H。 初始化矩阵Q和R，以及向量qq，这些都是算法中用到的变量。 假设一个编码字c，经过BPSK调制后得到x，加入噪声后得到y。 计算一个初步的解码结果c，以及对应的校正子s。 如果s的所有元素都为0，那么c就是正确的解码结果，否则进入迭代过程。 在迭代过程中，首先计算接收到的对数似然比（LLR），然后进行若干次迭代，每次迭代包括水平步骤和垂直步骤。 在水平步骤中，更新矩阵R的元素。 在垂直步骤中，更新向量qq的元素，以及矩阵Q的元素。 根据更新后的qq计算一个新的解码结果c_estimate，以及对应的校正子s。 如果s的所有元素都为0，那么c_estimate就是正确的解码结果，否则继续迭代。 最后，输出解码结果。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://openai.com/posts/signal/4.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"miku\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"SPA部分解释\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"SPA部分解释 （本文程序默认群文件py_sum_product_example） 一.概括内容 SPA是一种用于解码线性块代码的迭代算法，通常用于低密度奇偶校验（LDPC）码。该算法通过迭代地更新\\\"概率\\\"消息，尝试找到一个合法的码字，即满足校验矩阵H的所有行的线性方程的解。 以下是代码的大体内容和结构： 导入numpy库：该库主要用于数值计算。 定义奇偶校验矩阵H。 初始化矩阵Q和R，以及向量qq，这些都是算法中用到的变量。 假设一个编码字c，经过BPSK调制后得到x，加入噪声后得到y。 计算一个初步的解码结果c，以及对应的校正子s。 如果s的所有元素都为0，那么c就是正确的解码结果，否则进入迭代过程。 在迭代过程中，首先计算接收到的对数似然比（LLR），然后进行若干次迭代，每次迭代包括水平步骤和垂直步骤。 在水平步骤中，更新矩阵R的元素。 在垂直步骤中，更新向量qq的元素，以及矩阵Q的元素。 根据更新后的qq计算一个新的解码结果c_estimate，以及对应的校正子s。 如果s的所有元素都为0，那么c_estimate就是正确的解码结果，否则继续迭代。 最后，输出解码结果。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"qem\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"SPA\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"编码\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"代码\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"LDPC\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2023-07-27T00:00:00.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"SPA部分解释\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2023-07-27T00:00:00.000Z\\\",\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"qem\\\",\\\"url\\\":\\\"https://user.qzone.qq.com/1441407386\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"一.概括内容\",\"slug\":\"一-概括内容\",\"link\":\"#一-概括内容\",\"children\":[]},{\"level\":2,\"title\":\"二.代码部分解释\",\"slug\":\"二-代码部分解释\",\"link\":\"#二-代码部分解释\",\"children\":[]},{\"level\":2,\"title\":\"三.一些问题\",\"slug\":\"三-一些问题\",\"link\":\"#三-一些问题\",\"children\":[]}],\"readingTime\":{\"minutes\":5.66,\"words\":1698},\"filePathRelative\":\"posts/signal/4.md\",\"localizedDate\":\"2023年7月27日\",\"excerpt\":\"<h1> SPA部分解释</h1>\\n<p>（本文程序默认群文件py_sum_product_example）</p>\\n<h2> 一.概括内容</h2>\\n<p>SPA是一种用于解码线性块代码的迭代算法，通常用于低密度奇偶校验（LDPC）码。该算法通过迭代地更新\\\"概率\\\"消息，尝试找到一个合法的码字，即满足校验矩阵H的所有行的线性方程的解。<br>\\n以下是代码的大体内容和结构：</p>\\n<ol>\\n<li>导入numpy库：该库主要用于数值计算。</li>\\n<li>定义奇偶校验矩阵H。</li>\\n<li>初始化矩阵Q和R，以及向量qq，这些都是算法中用到的变量。</li>\\n<li>假设一个编码字c，经过BPSK调制后得到x，加入噪声后得到y。</li>\\n<li>计算一个初步的解码结果c，以及对应的校正子s。</li>\\n<li>如果s的所有元素都为0，那么c就是正确的解码结果，否则进入迭代过程。</li>\\n<li>在迭代过程中，首先计算接收到的对数似然比（LLR），然后进行若干次迭代，每次迭代包括水平步骤和垂直步骤。</li>\\n<li>在水平步骤中，更新矩阵R的元素。</li>\\n<li>在垂直步骤中，更新向量qq的元素，以及矩阵Q的元素。</li>\\n<li>根据更新后的qq计算一个新的解码结果c_estimate，以及对应的校正子s。</li>\\n<li>如果s的所有元素都为0，那么c_estimate就是正确的解码结果，否则继续迭代。</li>\\n<li>最后，输出解码结果。</li>\\n</ol>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
